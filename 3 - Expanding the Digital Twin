{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNx1esgFQFDyojA1sYZgxTO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **Creating a Digital Twin**"],"metadata":{"id":"pn2EvCGjQ-fb"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"nh6Z84QvAmTu"},"outputs":[],"source":["import copy"]},{"cell_type":"markdown","source":["*Nice_print: A function for displaying information in a nice way.*"],"metadata":{"id":"FBxPoGQmMXye"}},{"cell_type":"code","source":["def nice_print(self):\n","    if type(self)==float:\n","        return  round(self,3)\n","    if type(self)==int:\n","        return  self\n","    if type(self)==list:\n","        return  list(map(lambda L: print(L),self))\n","    if type(self)==dict:\n","        return  dict(map(lambda kv: (kv[0], print(kv[1])),self.items()))"],"metadata":{"id":"Q7RvOOKzFw5Y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Now that we have a working Jupyter notebook installation and a basic familiarity with Python, we can begin creating the Digital Twin.  "],"metadata":{"id":"gNGIo0CSW6MT"}},{"cell_type":"code","source":["genesis = {\n","    \"AMM\":{\"A1\":100,\"A2\":100,\"s\":100,\"fee\":0.01},\n","    \"Trader\":{\"A1\":100,\"A2\":100,\"s\":0},\n","    \"LP\":{\"A1\":0,\"A2\":0,\"s\":100}\n","    }\n","\n","print(\"The amount of A1 in the AMM is:\", genesis[\"AMM\"][\"A1\"]);\n","print(\"The amount of A1 of the agent is:\", genesis[\"Trader\"][\"A1\"]);\n","print(\"The amount of A2 of the AMM is:\", genesis[\"AMM\"][\"A2\"]);\n","print(\"The amount of A2 of the agent is:\", genesis[\"Trader\"][\"A2\"]);"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WtXkH-wyRCTZ","executionInfo":{"status":"ok","timestamp":1710001946978,"user_tz":300,"elapsed":26,"user":{"displayName":"Carlos Mario Alba Rodriguez","userId":"04133203403950980115"}},"outputId":"c5e04f81-6fc9-4bde-fa7a-89837f8ad2f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The amount of A1 in the AMM is: 100\n","The amount of A1 of the agent is: 100\n","The amount of A2 of the AMM is: 100\n","The amount of A2 of the agent is: 100\n"]}]},{"cell_type":"code","source":["def swapToAsset2(state, inputs):\n","    \"\"\"Swaps a specified amount of asset 1 (A1) from an agent to asset 2 (A2) in the AMM.\n","\n","    Args:\n","        state: A dictionary containing the current state of the system, including\n","              the AMM pool information and the agent's asset balances.\n","        inputs: A list containing two elements:\n","            - agent: The name of the agent who wants to swap.\n","            - dA1: The amount of asset 1 the agent wants to swap.\n","\n","    Returns:\n","        None. The function updates the state dictionary in-place.\n","\n","    Raises:\n","        ValueError: If the agent does not have enough A1 to perform the swap.\n","    \"\"\"\n","\n","    # Get the agent and the amount of A1 to swap from the inputs.\n","    agent = inputs[0];\n","    dA1 = inputs[1];\n","\n","    # Calculate the fee factor based on the AMM fee.\n","    feeFactor = (1 - state[\"AMM\"][\"fee\"]);\n","\n","    # Calculate the amount of A2 received by the agent after considering the fee.\n","    dA2 = (state[\"AMM\"][\"A2\"] * dA1 * feeFactor) / (state[\"AMM\"][\"A1\"] + dA1 * feeFactor);\n","\n","    # Check if the agent has enough A1 to perform the swap.\n","    if dA1 > 0 and state[agent][\"A1\"] - dA1 >= 0:\n","        # If the agent has enough A1, update the state accordingly.\n","        state[\"AMM\"][\"A1\"] += dA1;  # Add dA1 to the AMM's A1 pool\n","        state[agent][\"A1\"] -= dA1;  # Remove dA1 from the agent's A1 balance\n","        state[\"AMM\"][\"A2\"] -= dA2;  # Remove dA2 from the AMM's A2 pool\n","        state[agent][\"A2\"] += dA2;  # Add dA2 to the agent's A2 balance\n","        print(\"Amount of A2 that the agent recieves after considering the fee:\", dA2);\n","    else:\n","        # If the agent does not have enough A1, raise an error.\n","        raise ValueError(\"Agent does not have enough A1 to perform the swap.\");"],"metadata":{"id":"hmZW09KPTnAa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def swapToAsset1(state, inputs):\n","    \"\"\"Swaps a specified amount of asset 2 (A2) from an agent to asset 1 (A1) in the AMM.\n","\n","    Args:\n","        state: A dictionary containing the current state of the system, including\n","              the AMM pool information and the agent's asset balances.\n","        inputs: A list containing two elements:\n","            - agent: The name of the agent who wants to swap.\n","            - dA2: The amount of asset 2 the agent wants to swap.\n","\n","    Returns:\n","        None. The function updates the state dictionary in-place.\n","\n","    Raises:\n","        ValueError: If the agent does not have enough A1 to perform the swap.\n","    \"\"\"\n","\n","    # Get the agent and the amount of A2 to swap from the inputs.\n","    agent = inputs[0];\n","    dA2 = inputs[1];\n","\n","    # Calculate the fee factor based on the AMM fee.\n","    feeFactor = (1 - state[\"AMM\"][\"fee\"]);\n","\n","    # Calculate the amount of A1 received by the agent after considering the fee.\n","    dA1 = (state[\"AMM\"][\"A1\"]* dA2 * feeFactor) / (state[\"AMM\"][\"A2\"] + dA2 * feeFactor);\n","\n","    # Check if the agent has enough A2 to perform the swap.\n","    if dA2 > 0 and state[agent][\"A2\"] - dA2 >= 0:\n","        # If the agent has enough A2, update the state accordingly.\n","        state[\"AMM\"][\"A2\"] += dA2;  # Add dA2 to the AMM's A2 pool\n","        state[agent][\"A2\"] -= dA2;  # Remove dA2 from the agent's A2 balance\n","        state[\"AMM\"][\"A1\"] -= dA1;  # Remove dA1 from the AMM's A1 pool\n","        state[agent][\"A1\"] += dA1;  # Add dA1 to the agent's A1 balance\n","        print(\"Amount of A1 that the agent recieves after considering the fee:\", dA1);\n","    else:\n","        # If the agent does not have enough A2, raise an error.\n","        raise ValueError(\"Agent does not have enough A2 to perform the swap.\");"],"metadata":{"id":"80yg0pXHUK5h"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def addLiquidity(state, inputs):\n","    \"\"\"Adds liquidity to the AMM pool by an agent depositing assets.\n","\n","    Args:\n","      state: A dictionary containing the current state of the system, including\n","             the AMM pool information (A1, A2, total liquidity (s)) and the agent's asset balances.\n","      inputs: A list containing three elements:\n","          - agent: The name of the agent who wants to add liquidity.\n","          - dA1: The desired amount of asset 1 the agent wants to deposit.\n","          - dA2: The desired amount of asset 2 the agent wants to deposit.\n","\n","    Returns:\n","        None. The function updates the state dictionary in-place.\n","\n","    Raises:\n","        ValueError: If the agent does not have enough of either asset to fulfill\n","                    the minimum deposit requirement based on the current pool ratio.\n","    \"\"\"\n","\n","    # Get agent name and desired deposit amounts for each asset.\n","    agent = inputs[0];\n","\n","    # Get current AMM pool information.\n","    A1 = state[\"AMM\"][\"A1\"]; # Current amount of asset 1 in the pool\n","    A2 = state[\"AMM\"][\"A2\"]; # Current amount of asset 2 in the pool\n","    S = state[\"AMM\"][\"s\"]; # Current total liquidity of the AMM pool\n","\n","    # Calculate the minimum deposit amount of each asset based on the current pool ratio.\n","    # This ensures a proportional contribution to maintain the pool's price ratio.\n","    dA1 = min(inputs[1], A1/A2*inputs[2]);\n","    dA2 = min(inputs[2], A2/A1*inputs[1]);\n","\n","    # Check if the agent has enough of both assets to meet the minimum deposit requirement.\n","    if(dA1<=state[agent][\"A1\"] and dA2 <= state[agent][\"A2\"]) and (dA1 > 0 and dA2 >0):\n","      # If enough assets, update the agent's and AMM pool's balances.\n","      state[agent][\"A1\"] -= dA1  # Remove dA1 from agent's A1 balance\n","      state[agent][\"A2\"] -= dA2  # Remove dA2 from agent's A2 balance\n","      state[\"AMM\"][\"A1\"] += dA1  # Add dA1 to the AMM's A1 pool\n","      state[\"AMM\"][\"A2\"] += dA2  # Add dA2 to the AMM's A2 pool\n","\n","      # Calculate the change in total liquidity based on the minimum deposit proportion.\n","      dS= min(dA1/A1, dA2/A2) * S;\n","      # Update the total liquidity of the AMM pool and the agent's share.\n","      state[\"AMM\"][\"s\"] += dS  # Increase total liquidity by dS\n","      state[agent][\"s\"] += dS  # Increase agent's liquidity share by dS\n","\n","    else:\n","    # If agent doesn't have enough assets, raise an error.\n","      raise ValueError(\"Agent does not have enough assets to meet minimum deposit requirement.\")\n"],"metadata":{"id":"hstk-4aRYHBI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def removeLiquidity(state,inputs):\n","  # Get agent name and the desired amount of liquidity to remove (dS).\n","  agent = inputs[0];\n","  dS = inputs[1];\n","\n","  # Check if requested removal is positive, within agent's liquidity share, and\n","  # doesn't exceed total pool liquidity.\n","  if(dS>0 and state[agent][\"s\"]-dS>=0 and state[\"AMM\"][\"s\"]-dS>=0):\n","    # Calculate the proportion of AMM pool balances to be withdrawn based on dS.\n","    DA = (1-dS/state[\"AMM\"][\"s\"]);\n","    # Get current AMM pool balances.\n","    A1 = state[\"AMM\"][\"A1\"];\n","    A2 = state[\"AMM\"][\"A2\"];\n","    # Update agent's liquidity share.\n","    state[agent][\"s\"]-=dS;\n","    # Update AMM pool balances by applying the withdrawal factor.\n","    state[\"AMM\"][\"A1\"]=A1*DA;\n","    state[\"AMM\"][\"A2\"]=A2*DA;\n","\n","    # Calculate the amount of each asset the agent receives based on the difference\n","    # between original pool balances and the updated balances.\n","    state[agent][\"A1\"]+= A1-state[\"AMM\"][\"A1\"];\n","    state[agent][\"A2\"]+= A2-state[\"AMM\"][\"A2\"];\n","    # Update total liquidity of the AMM pool.\n","    state[\"AMM\"][\"s\"]-=dS;\n","  else:\n","    # If agent doesn't have enough assets, raise an error (not shown here).\n","    raise ValueError(\"Agent does not have enough assets to meet minimum removal requirement.\")\n"],"metadata":{"id":"oHVy6ZUvg2c4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Testing #1**"],"metadata":{"id":"M2wPH3xlFdoo"}},{"cell_type":"code","source":["genesis = {\n","    \"AMM\":{\"A1\":100,\"A2\":100,\"s\":100,\"fee\":0.0},\n","    \"Trader\":{\"A1\":100,\"A2\":100,\"s\":0},\n","    \"LP\":{\"A1\":0,\"A2\":0,\"s\":100}\n","    }\n","\n","swapToAsset2(genesis,[\"Trader\",10])\n","\n","genesis"],"metadata":{"id":"wgHj2LGml6tA","executionInfo":{"status":"ok","timestamp":1710002508658,"user_tz":300,"elapsed":204,"user":{"displayName":"Carlos Mario Alba Rodriguez","userId":"04133203403950980115"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"734c9534-09cc-44b0-b068-a97ea7a14869"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Amount of A2 that the agent recieves after considering the fee: 9.090909090909092\n"]},{"output_type":"execute_result","data":{"text/plain":["{'AMM': {'A1': 110, 'A2': 90.9090909090909, 's': 100, 'fee': 0.0},\n"," 'Trader': {'A1': 90, 'A2': 109.0909090909091, 's': 0},\n"," 'LP': {'A1': 0, 'A2': 0, 's': 100}}"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["**Testing #2**"],"metadata":{"id":"xGFAjil1FpE9"}},{"cell_type":"code","source":["genesis = {\n","    \"AMM\":{\"A1\":100,\"A2\":100,\"s\":100,\"fee\":0.0},\n","    \"Trader\":{\"A1\":100,\"A2\":100,\"s\":0},\n","    \"LP\":{\"A1\":0,\"A2\":0,\"s\":100}\n","    }\n","\n","swapToAsset2(genesis,[\"Trader\",10])\n","swapToAsset1(genesis,[\"Trader\",9.0909090909091])\n","\n","genesis"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vtcIgkXSFqZx","executionInfo":{"status":"ok","timestamp":1710002533744,"user_tz":300,"elapsed":208,"user":{"displayName":"Carlos Mario Alba Rodriguez","userId":"04133203403950980115"}},"outputId":"8c29e359-6f2d-4957-ef93-0bb000dd3fd8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Amount of A2 that the agent recieves after considering the fee: 9.090909090909092\n","Amount of A1 that the agent recieves after considering the fee: 10.00000000000001\n"]},{"output_type":"execute_result","data":{"text/plain":["{'AMM': {'A1': 99.99999999999999, 'A2': 100.0, 's': 100, 'fee': 0.0},\n"," 'Trader': {'A1': 100.00000000000001, 'A2': 100.0, 's': 0},\n"," 'LP': {'A1': 0, 'A2': 0, 's': 100}}"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["**ActionList: Used to define all actions to be performed in one place**"],"metadata":{"id":"-5_6nrUPZyCq"}},{"cell_type":"code","source":["actionList = [\n","        [ removeLiquidity , [  \"LP\" , 5 ]],\n","        [ removeLiquidity , [  \"LP\" , 5 ]],\n","        [ removeLiquidity , [  \"LP\" , 5 ]] ]"],"metadata":{"id":"QI9FwWUdZ3Xt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Evolve function: A function that can evolve the system, taking an actionList and moving the state variables forward**"],"metadata":{"id":"6QpK9d6gaKy0"}},{"cell_type":"code","source":["def evolve(state, actionStack):\n","  # Create a list to store the history of states after each action.\n","  history = [copy.deepcopy(state)]; # Initial state as the first element\n","\n","  # Loop through each action in the action stack.\n","  for action in actionStack:\n","    # Extract the function and its arguments from the action.\n","    # Execute the action function on the current state with the provided arguments.\n","    action[0](state, action[1]);\n","\n","    # After the action is performed, create a deep copy of the updated state and add it to the history.\n","    history.append(copy.deepcopy(state));\n","\n","  # Return the list containing the history of states after each action.\n","  return history;"],"metadata":{"id":"ezo5afGBaNEM","executionInfo":{"status":"ok","timestamp":1710946432414,"user_tz":300,"elapsed":5,"user":{"displayName":"Carlos Mario Alba Rodriguez","userId":"04133203403950980115"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"hzzIX8vjbnhx"},"execution_count":null,"outputs":[]}]}